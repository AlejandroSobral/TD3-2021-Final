     1                                  USE32
     2                                  GLOBAL init32
     3                                  GLOBAL start32_launcher
     4                                  GLOBAL TURN_ON_PAGING
     5                                  GLOBAL _idtr
     6                                  %include "inc/processor-flags.h" 
     1                              <1> %define X86_CR0_PE      0x00000001 ;/* Protectede mode enable*/
     2                              <1> %define X86_CR0_MP      0x00000002 ;/* Monitor coProcessor*/
     3                              <1> %define X86_CR0_EM      0x00000004 ;/* Emulation*/
     4                              <1> %define X86_CR0_TS      0x00000008 ;/* Task Switched*/
     5                              <1> %define X86_CR0_ET      0x00000010 ;/* Extension Type*/
     6                              <1> %define X86_CR0_NE      0x00000020 ;/* Numeric Error*/
     7                              <1> %define X86_CR0_WP      0x00010000 ;/* Write Protect*/
     8                              <1> %define X86_CR0_AM      0x00040000 ;/* Alignment Mask*/
     9                              <1> %define X86_CR0_NW      0x20000000 ;/* Not Write-through*/
    10                              <1> %define X86_CR0_CD      0x40000000 ;/* Cache Disable*/
    11                              <1> %define X86_CR0_PG      0x80000000 ;/* PaGine*/
    12                              <1> 
     7                                  
     8                                  SECTION .init32
     9                                  
    10                                  ;Load references
    11                                  EXTERN  DS_SEL
    12                                  EXTERN __FUNCTIONS_PHY
    13                                  EXTERN __TASK_1_BSS_PHY
    14                                  EXTERN __TASK_1_DATA_PHY
    15                                  EXTERN __TASK_1_RODATA_PHY
    16                                  EXTERN __TASK_1_TEXT_PHY
    17                                  EXTERN __TASK_4_BSS_PHY
    18                                  EXTERN __TASK_4_DATA_PHY
    19                                  EXTERN __TASK_4_RODATA_PHY
    20                                  EXTERN __TASK_4_TEXT_PHY
    21                                  EXTERN __TASK_2_BSS_PHY
    22                                  EXTERN __TASK_2_DATA_PHY
    23                                  EXTERN __TASK_2_RODATA_PHY
    24                                  EXTERN __TASK_2_TEXT_PHY
    25                                  EXTERN __TASK_3_BSS_PHY
    26                                  EXTERN __TASK_3_DATA_PHY
    27                                  EXTERN __TASK_3_RODATA_PHY
    28                                  EXTERN __TASK_3_TEXT_PHY
    29                                  EXTERN __DATA_PHY
    30                                  EXTERN __KERNEL_32_PHY
    31                                  EXTERN __ISR_AND_KEYBOARD_PHY
    32                                  EXTERN __SYS_TABLES_PHY
    33                                  EXTERN  __STACK_END_32
    34                                  EXTERN  __STACK_SIZE_32
    35                                  EXTERN  CS_SEL_32
    36                                  EXTERN  kernel32_init
    37                                  EXTERN  __KERNEL_32_LMA
    38                                  EXTERN  __codigo_KERNEL32_size
    39                                  EXTERN __ISR_AND_KEYBOARD_CODE_size; 
    40                                  EXTERN __ISR_AND_KEYBOARD_VMA;
    41                                  EXTERN __ISR_AND_KEYBOARD_LMA;_
    42                                  EXTERN  __fast_memcpy
    43                                  EXTERN  __fast_memcpy_rom
    44                                  EXTERN __DATA__size
    45                                  EXTERN  kernel32_code_size
    46                                  EXTERN  __functions_size
    47                                  EXTERN TASK_1_rodata_size
    48                                  EXTERN TASK_1_data_size
    49                                  EXTERN TASK_1_bss_size
    50                                  EXTERN TASK_1_TEXT_size
    51                                  EXTERN TASK_2_rodata_size
    52                                  EXTERN TASK_2_data_size
    53                                  EXTERN TASK_2_bss_size
    54                                  EXTERN TASK_2_TEXT_size
    55                                  EXTERN TASK_3_rodata_size
    56                                  EXTERN TASK_3_data_size
    57                                  EXTERN TASK_3_bss_size
    58                                  EXTERN TASK_3_TEXT_size
    59                                  EXTERN TASK_4_rodata_size
    60                                  EXTERN TASK_4_data_size
    61                                  EXTERN TASK_4_bss_size
    62                                  EXTERN TASK_4_TEXT_size
    63                                  EXTERN __TASK_1_DATA_LMA
    64                                  EXTERN __TASK_1_DATA_VMA
    65                                  EXTERN __TASK_1_RODATA_VMA
    66                                  EXTERN __TASK_1_RODATA_LMA
    67                                  EXTERN __TASK_1_TEXT_LMA
    68                                  EXTERN __TASK_1_TEXT_VMA
    69                                  EXTERN __TASK_1_BSS_LMA
    70                                  EXTERN __TASK_1_BSS_VMA
    71                                  EXTERN __TASK_2_DATA_LMA
    72                                  EXTERN __TASK_2_RODATA_LMA
    73                                  EXTERN __TASK_2_TEXT_LMA
    74                                  EXTERN __TASK_2_TEXT_VMA
    75                                  EXTERN __TASK_2_BSS_LMA
    76                                  EXTERN __TASK_2_BSS_VMA
    77                                  EXTERN __TASK_3_DATA_LMA
    78                                  EXTERN __TASK_3_RODATA_LMA
    79                                  EXTERN __TASK_3_TEXT_LMA
    80                                  EXTERN __TASK_3_TEXT_VMA
    81                                  EXTERN __TASK_3_BSS_LMA
    82                                  EXTERN __TASK_3_BSS_VMA
    83                                  EXTERN __TASK_4_DATA_LMA
    84                                  EXTERN __TASK_4_DATA_VMA
    85                                  EXTERN __TASK_4_RODATA_VMA
    86                                  EXTERN __TASK_4_RODATA_LMA
    87                                  EXTERN __TASK_4_TEXT_LMA
    88                                  EXTERN __TASK_4_TEXT_VMA
    89                                  EXTERN __TASK_4_BSS_LMA
    90                                  EXTERN __TASK_4_BSS_VMA
    91                                  EXTERN  __FUNCTIONS_LMA
    92                                  EXTERN  __KERNEL_32_VMA
    93                                  EXTERN  __FUNCTIONS_VMA
    94                                  EXTERN __DATA_LMA
    95                                  EXTERN __DATA_VMA
    96                                  EXTERN __SYS_TABLES_GDT 
    97                                  EXTERN __SYS_TABLES_IDT
    98                                  EXTERN __SYS_TABLES_LMA
    99                                  EXTERN  __sys_tables_size
   100                                  EXTERN SCREEN_POINTER
   101                                  EXTERN gdtr_32
   102                                  
   103                                  
   104                                  ;JMP References
   105                                  EXTERN init_pic
   106                                  EXTERN init_IDT
   107                                  EXTERN init_timer0
   108                                  EXTERN load_tss
   109                                  
   110                                  
   111                                  EXTERN go_paging
   112                                  KeyBoard_IRQ equ 0x01
   113                                  VIDEO_BUFFER_ADDR EQU 0x000B8000
   114                                  
   115                                  
   116 00000000 1004                    _idtr   dw ((0x80*8)+(0x2*8))
   117 00000002 [00000000]                      dd __SYS_TABLES_IDT
   118                                  
   119                                  
   120                                  init32:
   121                                  start32_launcher:
   122                                  
   123                                      ;Selectors init
   124 00000006 66B8[0000]                  mov ax, DS_SEL
   125 0000000A 8ED8                        mov ds, ax
   126 0000000C 8EC0                        mov es, ax
   127 0000000E 8EE8                        mov gs, ax
   128 00000010 8EE0                        mov fs, ax
   129                                  
   130                                      ;Stack init
   131 00000012 8ED0                        mov ss,ax
   132 00000014 BC[00000000]                mov esp,__STACK_END_32
   133 00000019 31C0                        xor eax,eax
   134                                  
   135                                      ;Clean Stack
   136 0000001B B9[00000000]                mov ecx,__STACK_SIZE_32   
   137                                      .stack_init:
   138 00000020 50                              push eax
   139 00000021 E2FD                            loop .stack_init
   140 00000023 BC[00000000]                mov esp,__STACK_END_32
   141                                  
   142                                      ;Start copying from ROM -> RAM.
   143                                      ;Copy Functions 
   144 00000028 55                          push ebp
   145 00000029 89E5                        mov ebp,esp
   146 0000002B 68[00000000]                push __functions_size; 
   147 00000030 68[00000000]                push __FUNCTIONS_PHY
   148 00000035 68[00000000]                push __FUNCTIONS_LMA ; 
   149 0000003A E8(00000000)                call __fast_memcpy_rom
   150 0000003F C9                          leave
   151 00000040 83F801                      cmp eax,1
   152 00000043 0F85A6020000                jne .halteo
   153                                          
   154                                  
   155                                      ;Copy Task Text
   156 00000049 55                          push ebp
   157 0000004A 89E5                        mov ebp,esp
   158 0000004C 68[00000000]                push  TASK_1_TEXT_size; 
   159 00000051 68[00000000]                push __TASK_1_TEXT_PHY
   160 00000056 68[00000000]                push __TASK_1_TEXT_LMA ; 
   161 0000005B E8(00000000)                call __fast_memcpy_rom ; 
   162 00000060 C9                          leave
   163 00000061 83F801                      cmp eax,1
   164 00000064 0F8585020000                jne .halteo
   165                                  
   166                                      
   167                                      ;Copy Task Bss 
   168 0000006A 55                          push ebp
   169 0000006B 89E5                        mov ebp,esp
   170 0000006D 68[00000000]                push  TASK_1_bss_size; 
   171 00000072 68[00000000]                push __TASK_1_BSS_PHY
   172 00000077 68[00000000]                push __TASK_1_BSS_LMA ; 
   173 0000007C E8(00000000)                call __fast_memcpy_rom
   174 00000081 C9                          leave
   175 00000082 83F801                      cmp eax,1
   176 00000085 0F8564020000                jne .halteo    
   177                                      
   178                                      ;Copy Task Data
   179 0000008B 55                          push ebp
   180 0000008C 89E5                        mov ebp,esp
   181 0000008E 68[00000000]                push  TASK_1_data_size; 
   182 00000093 68[00000000]                push __TASK_1_DATA_PHY
   183 00000098 68[00000000]                push __TASK_1_DATA_LMA ; 
   184 0000009D E8(00000000)                call __fast_memcpy_rom
   185 000000A2 C9                          leave
   186 000000A3 83F801                      cmp eax,1
   187 000000A6 0F8543020000                jne .halteo
   188                                      
   189                                      ;Copy Task RoData
   190 000000AC 55                          push ebp
   191 000000AD 89E5                        mov ebp,esp
   192 000000AF 68[00000000]                push  TASK_1_rodata_size; 
   193 000000B4 68[00000000]                push __TASK_1_RODATA_PHY
   194 000000B9 68[00000000]                push __TASK_1_RODATA_LMA ; 
   195 000000BE E8(00000000)                call __fast_memcpy_rom
   196 000000C3 C9                          leave
   197 000000C4 83F801                      cmp eax,1
   198 000000C7 0F8522020000                jne .halteo
   199                                              
   200                                        ;Copy Task Text
   201 000000CD 55                          push ebp
   202 000000CE 89E5                        mov ebp,esp
   203 000000D0 68[00000000]                push  TASK_2_TEXT_size; 
   204 000000D5 68[00000000]                push __TASK_2_TEXT_PHY
   205 000000DA 68[00000000]                push __TASK_2_TEXT_LMA ; 
   206 000000DF E8(00000000)                call __fast_memcpy_rom ; 
   207 000000E4 C9                          leave
   208 000000E5 83F801                      cmp eax,1
   209 000000E8 0F8501020000                jne .halteo
   210                                            
   211                                      ;Copy Task Bss 
   212 000000EE 55                          push ebp
   213 000000EF 89E5                        mov ebp,esp
   214 000000F1 68[00000000]                push  TASK_2_bss_size 
   215 000000F6 68[00000000]                push __TASK_2_BSS_PHY
   216 000000FB 68[00000000]                push __TASK_2_BSS_LMA ; 
   217 00000100 E8(00000000)                call __fast_memcpy_rom
   218 00000105 C9                          leave
   219 00000106 83F801                      cmp eax,1
   220 00000109 0F85E0010000                jne .halteo    
   221                                    
   222                                      ;Copy Task Data
   223 0000010F 55                          push ebp
   224 00000110 89E5                        mov ebp,esp
   225 00000112 68[00000000]                push  TASK_2_data_size; 
   226 00000117 68[00000000]                push __TASK_2_DATA_PHY
   227 0000011C 68[00000000]                push __TASK_2_DATA_LMA ; 
   228 00000121 E8(00000000)                call __fast_memcpy_rom
   229 00000126 C9                          leave
   230 00000127 83F801                      cmp eax,1
   231 0000012A 0F85BF010000                jne .halteo
   232                                  
   233                                             
   234                                      
   235                                      ;Copy Task RoData
   236 00000130 55                          push ebp
   237 00000131 89E5                        mov ebp,esp
   238 00000133 68[00000000]                push  TASK_2_rodata_size; 
   239 00000138 68[00000000]                push __TASK_2_RODATA_PHY
   240 0000013D 68[00000000]                push __TASK_2_RODATA_LMA ; 
   241 00000142 E8(00000000)                call __fast_memcpy_rom
   242 00000147 C9                          leave
   243 00000148 83F801                      cmp eax,1
   244 0000014B 0F859E010000                jne .halteo
   245                                  
   246                                  ;Copy Task Text
   247 00000151 55                          push ebp
   248 00000152 89E5                        mov ebp,esp
   249 00000154 68[00000000]                push  TASK_3_TEXT_size; 
   250 00000159 68[00000000]                push __TASK_3_TEXT_PHY
   251 0000015E 68[00000000]                push __TASK_3_TEXT_LMA ; 
   252 00000163 E8(00000000)                call __fast_memcpy_rom ; 
   253 00000168 C9                          leave
   254 00000169 83F801                      cmp eax,1
   255 0000016C 0F857D010000                jne .halteo 
   256                                      
   257                                      ;Copy Task Bss 
   258 00000172 55                          push ebp
   259 00000173 89E5                        mov ebp,esp
   260 00000175 68[00000000]                push  TASK_3_bss_size 
   261 0000017A 68[00000000]                push __TASK_3_BSS_PHY
   262 0000017F 68[00000000]                push __TASK_3_BSS_LMA ; 
   263 00000184 E8(00000000)                call __fast_memcpy_rom
   264 00000189 C9                          leave
   265 0000018A 83F801                      cmp eax,1
   266 0000018D 0F855C010000                jne .halteo    
   267                                      
   268                                      ;Copy Task Data
   269 00000193 55                          push ebp
   270 00000194 89E5                        mov ebp,esp
   271 00000196 68[00000000]                push  TASK_3_data_size; 
   272 0000019B 68[00000000]                push __TASK_3_DATA_PHY
   273 000001A0 68[00000000]                push __TASK_3_DATA_LMA ; 
   274 000001A5 E8(00000000)                call __fast_memcpy_rom
   275 000001AA C9                          leave
   276 000001AB 83F801                      cmp eax,1
   277 000001AE 0F853B010000                jne .halteo
   278                                      
   279                                      ;Copy Task RoData
   280 000001B4 55                          push ebp
   281 000001B5 89E5                        mov ebp,esp
   282 000001B7 68[00000000]                push  TASK_3_rodata_size; 
   283 000001BC 68[00000000]                push __TASK_3_RODATA_PHY
   284 000001C1 68[00000000]                push __TASK_3_RODATA_LMA ; 
   285 000001C6 E8(00000000)                call __fast_memcpy_rom
   286 000001CB C9                          leave
   287 000001CC 83F801                      cmp eax,1
   288 000001CF 0F851A010000                jne .halteo       
   289                                  
   290                                      ;Copy Task Text
   291 000001D5 55                          push ebp
   292 000001D6 89E5                        mov ebp,esp
   293 000001D8 68[00000000]                push  TASK_4_TEXT_size; 
   294 000001DD 68[00000000]                push __TASK_4_TEXT_PHY
   295 000001E2 68[00000000]                push __TASK_4_TEXT_LMA ; 
   296 000001E7 E8(00000000)                call __fast_memcpy_rom ; 
   297 000001EC C9                          leave
   298 000001ED 83F801                      cmp eax,1
   299 000001F0 0F85F9000000                jne .halteo 
   300                                  
   301                                      ;Copy Task Bss 
   302 000001F6 55                          push ebp
   303 000001F7 89E5                        mov ebp,esp
   304 000001F9 68[00000000]                push  TASK_4_bss_size; 
   305 000001FE 68[00000000]                push __TASK_4_BSS_PHY
   306 00000203 68[00000000]                push __TASK_4_BSS_LMA ; 
   307 00000208 E8(00000000)                call __fast_memcpy_rom
   308 0000020D C9                          leave
   309 0000020E 83F801                      cmp eax,1
   310 00000211 0F85D8000000                jne .halteo    
   311                                      
   312                                      ;Copy Task Data
   313 00000217 55                          push ebp
   314 00000218 89E5                        mov ebp,esp
   315 0000021A 68[00000000]                push  TASK_4_data_size; 
   316 0000021F 68[00000000]                push __TASK_4_DATA_PHY
   317 00000224 68[00000000]                push __TASK_4_DATA_LMA ; 
   318 00000229 E8(00000000)                call __fast_memcpy_rom
   319 0000022E C9                          leave
   320 0000022F 83F801                      cmp eax,1
   321 00000232 0F85B7000000                jne .halteo
   322                                  
   323                                      ;Copy Task RoData
   324 00000238 55                          push ebp
   325 00000239 89E5                        mov ebp,esp
   326 0000023B 68[00000000]                push  TASK_4_rodata_size; 
   327 00000240 68[00000000]                push __TASK_4_RODATA_PHY
   328 00000245 68[00000000]                push __TASK_4_RODATA_LMA ; 
   329 0000024A E8(00000000)                call __fast_memcpy_rom
   330 0000024F C9                          leave
   331 00000250 83F801                      cmp eax,1
   332 00000253 0F8596000000                jne .halteo
   333                                  
   334 00000259 55                          push ebp
   335 0000025A 89E5                        mov ebp,esp
   336 0000025C 68[00000000]                push  __DATA__size; 
   337 00000261 68[00000000]                push __DATA_PHY
   338 00000266 68[00000000]                push __DATA_LMA ; 
   339 0000026B E8(00000000)                call __fast_memcpy_rom
   340 00000270 C9                          leave
   341 00000271 83F801                      cmp eax,1
   342 00000274 7579                        jne .halteo  
   343                                  
   344                                      ;Copy Kernel
   345 00000276 55                          push ebp
   346 00000277 89E5                        mov ebp,esp
   347 00000279 68[00000000]                push __codigo_KERNEL32_size; 
   348 0000027E 68[00000000]                push __KERNEL_32_PHY
   349 00000283 68[00000000]                push __KERNEL_32_LMA;
   350 00000288 E8(00000000)                call __fast_memcpy_rom
   351 0000028D C9                          leave
   352 0000028E 83F801                      cmp eax,1
   353 00000291 755C                        jne .halteo
   354                                  
   355                                      ;ISR & KEYBOARD Codes
   356 00000293 55                          push ebp
   357 00000294 89E5                        mov ebp,esp
   358 00000296 68[00000000]                push __ISR_AND_KEYBOARD_CODE_size; 
   359 0000029B 68[00000000]                push __ISR_AND_KEYBOARD_PHY
   360 000002A0 68[00000000]                push __ISR_AND_KEYBOARD_LMA;_
   361 000002A5 E8(00000000)                call __fast_memcpy_rom
   362 000002AA C9                          leave
   363 000002AB 83F801                      cmp eax,1
   364 000002AE 753F                        jne .halteo
   365                                  
   366 000002B0 55                          push ebp
   367 000002B1 89E5                        mov ebp,esp
   368 000002B3 68[00000000]                push  __sys_tables_size; 
   369 000002B8 68[00000000]                push __SYS_TABLES_GDT
   370 000002BD 68[00000000]                push __SYS_TABLES_LMA ;
   371 000002C2 E8(00000000)                call __fast_memcpy_rom
   372 000002C7 C9                          leave
   373 000002C8 83F801                      cmp eax,1
   374 000002CB 7522                        jne .halteo
   375                                  
   376 000002CD E8(00000000)                call init_IDT;  IDT Init
   377                                  
   378                                      ;Here I Should start setting CR3 & CR0.PG (Bit 31)
   379 000002D2 0F011D[00000000]            lidt[_idtr] ;Load IDT
   380 000002D9 0F0115[00000000]            lgdt[gdtr_32];Load GDT
   381                                  
   382 000002E0 E8(00000000)                call init_pic ; PIC Init
   383 000002E5 E8(00000000)                call init_timer0; 
   384 000002EA E9(00000000)                jmp go_paging; Let's do it!
   385                                      
   386                                  
   387                                  .halteo:
   388 000002EF F4                          hlt
   389 000002F0 EBFD                        jmp .halteo
   390                                  
   391                                  
   392                                  
   393                                  TURN_ON_PAGING:
   394                                      ; Paging turn on
   395 000002F2 0F20C0                      mov   eax, cr0 
   396 000002F5 0D00000080                  or    eax, X86_CR0_PG
   397 000002FA 0F22C0                      mov   cr0, eax  
   398                                      
   399 000002FD E8(00000000)                call load_tss;
   400                                  
   401                                  
   402 00000302 EA[00000000][0000]          jmp CS_SEL_32:kernel32_init
